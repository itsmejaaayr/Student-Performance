# -*- coding: utf-8 -*-
"""Internship_task#01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RsJc0tSCn6XHxo7yL5INrls0jNTIG1rG
"""

#importing pandas library
import pandas as pd
#import matplotlib
import matplotlib.pyplot as plt
#importing seaborn library
import seaborn as sns

#loading data
student_performance = pd.read_csv('Student_performance_data.csv')
df = pd.DataFrame(student_performance)

# View first five rows of the dataset
student_performance.head()

student_performance.isnull().sum()

#Total Students
print(df['StudentID'].count())

#Total Extracurricular
Extracurricular_counts = df['Extracurricular'].value_counts()
print(Extracurricular_counts)

#Total Parental Support
ParentalSupport_counts = df['ParentalSupport'].value_counts()
print(ParentalSupport_counts)

#Gender
Gender_counts = df['Gender'].value_counts()
print(Gender_counts)

# Gender Plot with Numeric Labels
Gender_counts = df.groupby(['Gender', 'Gender']).size().unstack()
ax = Gender_counts.plot(kind='bar', stacked=True, colormap='plasma')
ax.get_legend().remove()
plt.ylabel('Count')
plt.xlabel('Gender')
plt.grid(True)
plt.title('Count of Gender')
plt.xticks(rotation=0)

# Adding numeric labels
for p in ax.patches:
    ax.annotate(f'{p.get_height():.0f}', 
                (p.get_x() + p.get_width() / 2., p.get_height()), 
                ha='center', va='center', fontsize=10, color='black', xytext=(0, 10),
                textcoords='offset points')

plt.show()

# Age Plot with Numeric Labels
plt.close('all')  

# Grouping data
count_students = df.groupby(['Age', 'Age']).size().unstack()

# Create a single figure labeled 'Figure 2' and axes
fig = plt.figure(num='Figure 2')
ax = fig.add_subplot(111)  # Explicit axes

# Plot data onto the predefined axes
count_students.plot(kind='bar', stacked=True, colormap='plasma', ax=ax)

# Customizing the plot
ax.get_legend().remove()
ax.set_ylabel('Count')
ax.set_xlabel('Age')
ax.set_title('Count by Age')
ax.tick_params(axis='x', rotation=0)

# Adding numeric labels
for p in ax.patches:
    ax.annotate(f'{p.get_height():.0f}',
                (p.get_x() + p.get_width() / 2., p.get_height()), 
                ha='center', va='center', fontsize=10, color='black', xytext=(0, 10),
                textcoords='offset points')

plt.show()

# Plot Tutoring
plt.figure(num='Figure 3')
Tutoring_counts = df['Tutoring'].value_counts()
plt.pie(Tutoring_counts, labels=Tutoring_counts.index, autopct='%1.0f%%', startangle=90)
plt.title('Distribution of Tutoring')
plt.axis('equal')
plt.show()

# Bar plot for GPA and Extracurricular Participation
plt.figure(num='Figure 4')
gpa_counts = df.groupby(['Extracurricular', 'Gender']).size().reset_index(name='Count')
ax = sns.barplot(data=gpa_counts, x='Extracurricular', y='Count', hue='Gender', palette='inferno')
plt.ylabel('Count')
plt.xlabel('Extracurricular Participation')
plt.title('Count of Students by Extracurricular Participation and Gender')
plt.grid(True)

# Adding numeric labels
for p in ax.patches:
    ax.annotate(f'{p.get_height():.0f}', 
                (p.get_x() + p.get_width() / 2., p.get_height()), 
                ha='center', va='center', fontsize=10, color='black', xytext=(0, 7),
                textcoords='offset points')

plt.show()

# Ethnicity & Parental Support
plt.figure(num='Figure 5')
ax = sns.countplot(data=df, x='Ethnicity', hue='ParentalSupport', palette='cividis')
plt.xlabel('Ethnicity')
plt.ylabel('ParentalSupport')
plt.grid(True)
plt.title('Ethnicity & ParentalSupport')

# Adding numeric labels
for p in ax.patches:
    ax.annotate(f'{p.get_height():.0f}', 
                (p.get_x() + p.get_width() / 2., p.get_height()), 
                ha='center', va='center', fontsize=10, color='black', xytext=(0, 7),
                textcoords='offset points')

plt.show()

# Sports Pie Chart
plt.figure(num='Figure 6')
Sports_counts = df['Sports'].value_counts()
plt.pie(Sports_counts, labels=Sports_counts.index, autopct='%1.0f%%', startangle=90)
plt.title('Distribution of Sports')
plt.axis('equal')
plt.show()

# ParentalSupport & ParentalEducation
plt.figure(num='Figure 7')
ax = sns.countplot(data=df, x='ParentalSupport', hue='ParentalEducation', palette='viridis')
plt.xlabel('ParentalSupport')
plt.ylabel('ParentalEducation')
plt.grid(True)
plt.title('ParentalSupport & ParentalEducation')

# Adding numeric labels
for p in ax.patches:
    ax.annotate(f'{p.get_height():.0f}', 
                (p.get_x() + p.get_width() / 2., p.get_height()), 
                ha='center', va='center', fontsize=10, color='black', xytext=(0, 7),
                textcoords='offset points')

plt.show()

# GradeClass & Tutoring
plt.figure(num='Figure 8')
ax = sns.countplot(data=df, x='GradeClass', hue='Tutoring', palette='viridis')
plt.xlabel('GradeClass')
plt.ylabel('Tutoring')
plt.grid(True)
plt.title('GradeClass & Tutoring')

# Adding numeric labels
for p in ax.patches:
    ax.annotate(f'{p.get_height():.0f}', 
                (p.get_x() + p.get_width() / 2., p.get_height()), 
                ha='center', va='center', fontsize=10, color='black', xytext=(0, 7),
                textcoords='offset points')

plt.show()